<!DOCTYPE html>
<html>

<head>
    <title>Chat Application</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/Assets/Images/dgicon.svg">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
        integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/theme/monokai.min.css">
    <style>
        :root {
            --base-font-size: 16px;
            --bg-color: #2c2c2c;
            --text-color: #d4d4d4;
            --header-bg: #3a3a3a;
            --border-color: #555;
            --user-message-bg: #4caf50;
            --ai-message-bg: #fffeba;
            --ai-message-text: #000;
            --primary-color: #4caf50;
            --danger-color: #f44336;
        }

        .light-theme {
            --bg-color: #f5f5f5;
            --text-color: #333;
            --header-bg: #ffffff;
            --border-color: #e0e0e0;
            --user-message-bg: #4caf50;
            --ai-message-bg: #e0f7fa;
            --ai-message-text: #000;
        }

        .sepia-theme {
            --bg-color: #f8f4e8; /* Light beige background */
            --text-color: #5e5245; /* Dark brown text */
            --header-bg: #e8e0d4; /* Sepia header background */
            --border-color: #d2c9bc; /* Sepia border color */
            --user-message-bg: #a3c2a1; /* Slightly muted green for user messages */
            --ai-message-bg: #f2e8cf; /* Lighter sepia for AI messages */
            --ai-message-text: #5e5245; /* Dark brown for AI message text */
        }

        .contrast-theme {
            --bg-color: #000000; /* Black background */
            --text-color: #ffffff; /* White text */
            --header-bg: #222222; /* Dark grey header */
            --border-color: #555555; /* Medium grey border */
            --user-message-bg: #00bb00; /* Bright green for user messages */
            --ai-message-bg: #eeeeee; /* Very light grey for AI messages */
            --ai-message-text: #000000; /* Black for AI message text */
        }


        html,
        body {
            height: 100%;
            margin: 0;
            font-family: 'Roboto', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            width: 100%;
            font-size: var(--base-font-size);
        }

        .chat-list-container {
            width: 250px;
            min-width: 250px;
            max-width: 300px;
            background-color: var(--header-bg);
            border-right: 1px solid var(--border-color);
            padding: 10px;
            display: flex;
            flex-direction: column;
            overflow-y: auto;

            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
            opacity: 1;
        }

        .chat-list-container.hidden-chat-list {
            display: none;
            opacity: 0;
            transform: translateX(-100%);
        }

        .chat-list-header {
            color: #fff;
            font-weight: bold;
            margin-bottom: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .light-theme .chat-list-header,
        .sepia-theme .chat-list-header,
        .contrast-theme .chat-list-header {
            color: var(--text-color);
        }


        .chat-list-header button {
            background-color: transparent;
            color: white;
            border: 1px solid var(--border-color);
            padding: 5px 8px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease, transform 0.1s ease;
        }

        .light-theme .chat-list-header button,
        .sepia-theme .chat-list-header button,
        .contrast-theme .chat-list-header button {
            color: var(--text-color);
            border-color: var(--border-color);
        }

        .light-theme .chat-list-header button:hover,
        .sepia-theme .chat-list-header button:hover {
            background-color: #f0f0f0;
        }
        .contrast-theme .chat-list-header button:hover {
            background-color: #333;
        }


        .chat-list_header button:hover {
            background-color: var(--border-color);
        }

        .chat-list-header button:active {
            transform: scale(0.95);
        }

        .chat-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .chat-list-item {
            background-color: #444;
            color: #fff;
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background-color 0.2s ease, transform 0.1s ease;
            opacity: 1;
            transform: translateY(0);
        }

        .light-theme .chat-list-item,
        .sepia-theme .chat-list-item,
        .contrast-theme .chat-list-item {
            background-color: var(--header-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        .light-theme .chat-list-item:hover,
        .sepia-theme .chat-list-item:hover {
            background-color: #f0f0f0;
        }
        .contrast-theme .chat-list-item:hover {
            background-color: #333;
        }


        .chat-list-item:hover {
            background-color: #555;
            transform: scale(1.02);
        }

        .chat-list-item button {
            background-color: transparent;
            color: white;
            border: none;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s ease, transform 0.1s ease;
        }
        .light-theme .chat-list-item button,
        .sepia-theme .chat-list-item button{
            color: #f44336;
        }
        .contrast-theme .chat-list-item button {
            color: #f44336; /* Keep danger color consistent */
        }


        .chat-list-item button:hover {
            opacity: 1;
            transform: scale(1.1);
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100%;
            margin-left: 0;
            transition: margin-left 0.3s ease-in-out;
        }

        .chat-container.chat-list-visible {
            width: calc(100% - 250px);
        }

        .dialog-header {
            background-color: var(--header-bg);
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            border-radius: 0;
            cursor: default;
            display: block;
            text-align: center;
            align-items: center;
            font-weight: bold;
            color: #fff;
        }
        .light-theme .dialog-header,
        .sepia-theme .dialog-header,
        .contrast-theme .dialog-header {
            color: var(--text-color);
            border-color: var(--border-color);
        }


        .dialog-content {
            padding: 10px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            color: var(--text-color);
            height: 100%;
        }
        .light-theme .dialog-content,
        .sepia-theme .dialog-content,
        .contrast-theme .dialog-content {
             color: var(--text-color);
        }


        .chat-messages-area {
            flex-grow: 1;
            overflow-y: auto;
            padding: 0 0 10px 0;
            display: flex;
            flex-direction: column;
            background-color: var(--bg-color);
            height: 100%;
            width: auto;
        }
        .light-theme .chat-messages-area,
        .sepia-theme .chat-messages-area,
        .contrast-theme .chat-messages-area {
            background-color: var(--bg-color);
        }

        .chat-input-area {
            display: flex;
            gap: 10px;
            padding-top: 15px;
            align-items: center;
        }

        .chat-input-area input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--header-bg);
            color: var(--text-color);
            font-size: 1em;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .light-theme .chat-input-area input[type="text"],
        .sepia-theme .chat-input-area input[type="text"],
        .contrast-theme .chat-input-area input[type="text"] {
            background-color: var(--header-bg);
            color: var(--text-color);
            border-color: var(--border-color);
        }

        .chat-input-area input[type="text"]:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 5px var(--primary-color);
            outline: none;
        }

        .chat-input-area button {
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .chat-input-area button:hover {
            background-color: #0056b3;
        }

        .chat-input-area button:active {
            transform: scale(0.95);
        }

        .message {
            margin-bottom: 8px;
            display: flex;
            clear: both;
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-bubble {
            padding: 10px 12px;
            border-radius: 20px;
            background-color: #444;
            max-width: 70%;
            word-wrap: break-word;
            color: #fff;
        }
        .light-theme .message-bubble,
        .sepia-theme .message-bubble,
        .contrast-theme .message-bubble {
             background-color: var(--ai-message-bg);
             color: var(--ai-message-text);
        }


        .user-message .message-bubble {
            background-color: var(--user-message-bg);
            color: #fff;
        }
        .sepia-theme .user-message .message-bubble {
            color: #fff; /* Ensure text is white in sepia user message */
        }
        .contrast-theme .user-message .message-bubble {
            color: #fff; /* Ensure text is white in contrast user message */
        }


        .ai-message .message-bubble {
            background-color: var(--ai-message-bg);
            color: var(--ai-message-text);
        }

        .dialog-footer {
            padding: 4px 10px;
            background-color: #1c1c1c61;
            position: fixed;
            bottom: 0;
            width: auto;
        }
        .light-theme .dialog-footer,
        .sepia-theme .dialog-footer,
        .contrast-theme .dialog-footer {
            background-color: var(--header-bg);
            color: var(--text-color);
        }

        /* Settings Popup Styles */
        .settings-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--header-bg);
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            z-index: 1001;
            display: none;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
        }
        .light-theme .settings-popup,
        .sepia-theme .settings-popup,
        .contrast-theme .settings-popup {
            background-color: var(--header-bg);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .settings-popup.show {
            display: block;
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-color);
            font-weight: bold;
            position: sticky;
            top: 0;
            background-color: var(--header-bg);
            z-index: 1;
        }
        .light-theme .settings-header,
        .sepia-theme .settings-header,
        .contrast-theme .settings-header {
            color: var(--text-color);
            background-color: var(--header-bg);
            border-color: var(--border-color);
        }

        .settings-header button {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.2em;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }
        .light-theme .settings-header button,
        .sepia-theme .settings-header button,
        .contrast-theme .settings-header button {
            color: var(--text-color);
        }

        .settings-header button:hover {
            opacity: 1;
        }

        .settings-tabs {
            display: flex;
            gap: 5px;
            padding: 0 15px;
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 60px;
            background-color: var(--header-bg);
            z-index: 1;
        }
        .light-theme .settings-tabs,
        .sepia-theme .settings-tabs,
        .contrast-theme .settings-tabs {
            background-color: var(--header-bg);
            border-color: var(--border-color);
        }

        .settings-tab {
            padding: 10px 15px;
            background: none;
            border: none;
            border-bottom: 2px solid transparent;
            color: var(--text-color);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9em;
        }
        .light-theme .settings-tab,
        .sepia-theme .settings-tab,
        .contrast-theme .settings-tab {
            color: var(--text-color);
        }

        .settings-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
        }
        .light-theme .settings-tab.active,
        .sepia-theme .settings-tab.active,
        .contrast-theme .settings-tab.active {
            color: var(--primary-color); /* Keep primary color for active tab */
        }


        .settings-content {
            padding: 20px;
            display: none;
        }
        .settings-content.active {
            display: block;
        }

        .settings-group {
            margin-bottom: 20px;
        }

        .settings-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-color);
        }
        .light-theme .settings-group label,
        .sepia-theme .settings-group label,
        .contrast-theme .settings-group label {
            color: var(--text-color);
        }


        .account-info {
            background-color: #444;
            padding: 15px;
            border-radius: 5px;
            color: var(--text-color);
        }
        .light-theme .account-info,
        .sepia-theme .account-info,
        .contrast-theme .account-info {
            background-color: var(--header-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        input[type="range"] {
            width: 100%;
            margin: 10px 0;
            -webkit-appearance: none;
            appearance: none;
            background: var(--border-color);
            height: 4px;
            border-radius: 2px;
            outline: none;
            transition: background 0.3s ease;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            background: #007bff;
            transform: scale(1.1);
        }

        input[type="range"]::-moz-range-thumb {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        input[type="range"]::-moz-range-thumb:hover {
            background: #007bff;
            transform: scale(1.1);
        }

        .light-theme input[type="range"],
        .sepia-theme input[type="range"],
        .contrast-theme input[type="range"] {
            background-color: var(--border-color);
        }

        .light-theme input[type="range"]::-webkit-slider-thumb,
        .light-theme input[type="range"]::-moz-range-thumb,
        .sepia-theme input[type="range"]::-webkit-slider-thumb,
        .sepia-theme input[type="range"]::-moz-range-thumb,
        .contrast-theme input[type="range"]::-webkit-slider-thumb,
        .contrast-theme input[type="range"]::-moz-range-thumb {
            background: var(--primary-color);
        }

        .light-theme input[type="range"]::-webkit-slider-thumb:hover,
        .light-theme input[type="range"]::-moz-range-thumb:hover,
        .sepia-theme input[type="range"]::-webkit-slider-thumb:hover,
        .sepia-theme input[type="range"]::-moz-range-thumb:hover,
        .contrast-theme input[type="range"]::-webkit-slider-thumb:hover,
        .contrast-theme input[type="range"]::-moz-range-thumb:hover {
            background: #0056b3;
        }


        .settings-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px;
            border-top: 1px solid var(--border-color);
            position: sticky;
            bottom: 0;
            background-color: var(--header-bg);
        }
        .light-theme .settings-footer,
        .sepia-theme .settings-footer,
        .contrast-theme .settings-footer {
             background-color: var(--header-bg);
             border-color: var(--border-color);
             color: var(--text-color);
        }


        .primary-button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .danger-button {
            background-color: var(--danger-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .settings-dropdown {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        .light-theme .settings-dropdown select,
        .sepia-theme .settings-dropdown select,
        .contrast-theme .settings-dropdown select {
             border-color: var(--border-color);
             background-color: var(--header-bg);
             color: var(--text-color);
        }


        .settings-dropdown select {
            width: 100%;
            padding: 8px 25px 8px 10px;
            border: 1px solid var(--border-color);
            border-radius: 50px;
            background-color: rgba(68, 68, 68, 0.9);
            color: var(--text-color);
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            cursor: pointer;
            font-size: 1em;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .settings-dropdown::after {
            content: '\25BC';
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            color: var(--text-color);
            pointer-events: none;
        }
        .light-theme .settings-dropdown::after,
        .sepia-theme .settings-dropdown::after,
        .contrast-theme .settings-dropdown::after {
             color: var(--text-color);
        }


        /* Responsive adjustments */
        @media (max-width: 768px) {
            .chat-container.chat-list-visible {
                margin-left: 0;
                width: 100%;
            }

            .chat-list-container {
                width: 80%;
                max-width: none;
            }

            .chat-list-container.visible-chat-list {
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                height: 100vh;
                box-shadow: 2px 0px 5px rgba(0, 0, 0, 0.5);
            }

            .chat-list-container.hidden-chat-list.visible-chat-list {
                display: none;
            }

            .settings-tabs {
                overflow-x: auto;
                padding-bottom: 5px;
            }

            .settings-tab {
                flex-shrink: 0;
            }
        }

        /* Style for Settings and Home Buttons in Footer */
        .dialog-footer button#settings-button,
        .dialog-footer a.githeme.buttons {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 15px;
            border-radius: 5px;
            border: 1px solid var(--border-color);
            background-color: var(--header-bg);
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
            text-decoration: none; /* For Home button if it's <a> tag */
        }

        .dialog-footer button#settings-button:hover,
        .dialog-footer a.githeme.buttons:hover {
            background-color: var(--border-color);
            color: #fff;
            border-color: var(--primary-color);
        }
        .light-theme .dialog-footer button#settings-button,
        .light-theme .dialog-footer a.githeme.buttons,
        .sepia-theme .dialog-footer button#settings-button,
        .sepia-theme .dialog-footer a.githeme.buttons,
        .contrast-theme .dialog-footer button#settings-button,
        .contrast-theme .dialog-footer a.githeme.buttons {
            color: var(--text-color);
            border-color: var(--border-color);
            background-color: var(--header-bg);
        }
        .light-theme .dialog-footer button#settings-button:hover,
        .light-theme .dialog-footer a.githeme.buttons:hover,
        .sepia-theme .dialog-footer button#settings-button:hover,
        .sepia-theme .dialog-footer a.githeme.buttons:hover {
            background-color: #f0f0f0;
        }
        .contrast-theme .dialog-footer button#settings-button:hover,
        .contrast-theme .dialog-footer a.githeme.buttons:hover {
            background-color: #333;
        }


        /* Blurred Background for Settings Popup */
        .settings-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            display: none;
        }

        .settings-popup-overlay.show {
            display: block;
        }

        /* Save Button Animation */
        #save-settings {
            position: relative;
            overflow: hidden;
        }

        #save-settings.saving::after {
            content: '';
            display: block;
            position: absolute;
            top: 50%;
            left: 50%;
            margin-top: -10px;
            margin-left: -10px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #fff;
            border-color: #fff transparent #fff transparent;
            animation: spin 1.2s linear infinite;
            z-index: 1;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }


        /* Disable interactions on settings popup content when saving */
        .settings-popup.saving * {
            pointer-events: none !important;
            opacity: 0.7;
        }
        .settings-popup.saving .settings-header button,
        .settings-popup.saving #cancel-settings {
             pointer-events: auto !important;
             opacity: 1;
        }

        /* Generating Animation Styles */
        .generating-message {
            justify-content: flex-start; /* Align animation to the left like AI messages */
        }

        .generating-message .message-bubble {
            background-color: var(--ai-message-bg); /* Use AI message background */
            color: var(--ai-message-text); /* Use AI message text color */
            font-style: italic; /* Optional: Italicize the "Generating..." text */
            text-align: center; /* Center the dots */
        }

        .generating-dots {
            display: inline-block;
        }

        .generating-dots span {
            display: inline-block;
            vertical-align: middle;
            animation: dot-pulse 1.5s infinite;
        }

        .generating-dots span:nth-child(2) {
            animation-delay: 0.5s;
        }

        .generating-dots span:nth-child(3) {
            animation-delay: 1s;
        }

        @keyframes dot-pulse {
            0% { opacity: 0.3; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1.2); }
            100% { opacity: 0.3; transform: scale(0.8); }
        }
    </style>
</head>

<body>
    <div class="chat-list-container" id="chat-list-container">
        <div class="dialog-header" style="padding-bottom: 5px;margin-bottom: 10px;">
            <div class="chat-list-header">
                <span>Chat History</span>
                <button id="chat-list-left-toggle-button" aria-label="Toggle Chat List"><i
                        class="fas fa-arrow-left"></i></button>
            </div>
        </div>
        <ul class="chat-list" id="chat-list">
        </ul>
        <div class="dialog-footer">
            <button id="settings-button"><i class="fas fa-gear"></i> Settings</button>
            <a class="buttons githeme" href="/home"><i class="fas fa-home"></i> Home</a>
        </div>
    </div>
    <div class="chat-container chat-list-visible" id="chat-container">
        <div class="dialog-header">
            <div class="chat-list-header">
                <button id="chat-list-right-toggle-button" aria-label="Toggle Chat List"><i
                        class="fas fa-arrow-right"></i></button>
                <div>Chat</div>
                <button id="new-chat-button"><i class="fas fa-plus"></i> New</button>
            </div>
        </div>
        <div class="dialog-content">
            <div class="chat-messages-area" id="chat-messages-area">
            </div>
            <div class="chat-input-area">
                <input type="text" id="chat-input" placeholder="Type your message here..." />
                <button id="send-chat-button">Send</button>
            </div>
        </div>
    </div>

    <!-- Settings Popup -->
    <div class="settings-popup" id="settings-popup">
        <div class="settings-header">
            <h3>Settings</h3>
            <button id="close-settings-button" aria-label="Close settings">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="settings-tabs">
            <button class="settings-tab active" data-tab="bot-settings" aria-selected="true">
                <i class="fas fa-robot"></i> Bot Settings
            </button>
            <button class="settings-tab" data-tab="appearance">
                <i class="fas fa-palette"></i> Appearance
            </button>
            <button class="settings-tab" data-tab="account">
                <i class="fas fa-user"></i> Account
            </button>
        </div>
        <div class="settings-content active" data-tab-content="bot-settings">
            <div class="settings-group">
                <label for="model-select">AI Model</label>
                <div class="settings-dropdown">
                    <select id="model-select">
                        <option value="default">Default Model</option>
                        <option value="advanced">Advanced Model</option>
                        <option value="expert">Expert Model</option>
                    </select>
                </div>
            </div>
            <div class="settings-group">
                <label for="temperature">Response Creativity</label>
                <input type="range" id="temperature" min="0" max="200" value="100">
                <span id="temperature-value">1.0</span>
            </div>
        </div>
        <div class="settings-content" data-tab-content="appearance">
            <div class="settings-group">
                <label for="theme-select">Theme</label>
                <div class="settings-dropdown">
                    <select id="theme-select">
                        <option value="dark">Dark</option>
                        <option value="light">Light</option>
                        <option value="sepia">Sepia</option>
                        <option value="contrast">Contrast</option>
                        <option value="system">System Default</option>
                    </select>
                </div>
            </div>
            <div class="settings-group">
                <label for="font-size">Font Size</label>
                <input type="range" id="font-size" min="12" max="24" value="16">
                <span id="font-size-value">16px</span>
            </div>
        </div>
        <div class="settings-content" data-tab-content="account">
            <div class="settings-group">
                <label>Account Information</label>
                <div class="account-info">
                    <p>Email: user@example.com</p>
                    <button id="logout-button" class="danger-button">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            </div>
        </div>
        <div class="settings-footer">
            <button id="save-settings" class="primary-button">Save Settings</button>
            <button id="cancel-settings">Cancel</button>
        </div>
    </div>
    <div class="settings-popup-overlay" id="settings-popup-overlay"></div>

    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        // DOM Elements
        const chatMessagesArea = document.getElementById('chat-messages-area');
        const chatInput = document.getElementById('chat-input');
        const sendChatButton = document.getElementById('send-chat-button');
        const newChatButton = document.getElementById('new-chat-button');
        const chatList = document.getElementById('chat-list');
        const chatListContainer = document.getElementById('chat-list-container');
        const chatListToggleRightButton = document.getElementById('chat-list-right-toggle-button');
        const chatListToggleLeftButton = document.getElementById('chat-list-left-toggle-button');
        const chatContainer = document.getElementById('chat-container');

        // Settings elements
        const settingsButton = document.getElementById('settings-button');
        const settingsPopup = document.getElementById('settings-popup');
        const closeSettingsButton = document.getElementById('close-settings-button');
        const cancelSettingsButton = document.getElementById('cancel-settings');
        const saveSettingsButton = document.getElementById('save-settings');
        const settingsTabs = document.querySelectorAll('.settings-tab');
        const settingsContents = document.querySelectorAll('.settings-content');
        const modelSelect = document.getElementById('model-select');
        const themeSelect = document.getElementById('theme-select');
        const temperatureInput = document.getElementById('temperature');
        const temperatureValue = document.getElementById('temperature-value');
        const fontSizeInput = document.getElementById('font-size');
        const fontSizeValue = document.getElementById('font-size-value');
        const logoutButton = document.getElementById('logout-button');
        const settingsOverlay = document.getElementById('settings-popup-overlay'); // Get overlay


        // App state
        let currentChatId = null;
        let isChatListVisible = true;
        let currentSettings = {
            model: 'default',
            theme: 'dark', // Default theme is dark now
            temperature: 1.0,
            fontSize: 16
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            fetchUserSettings(); // Fetch settings from API
            fetchChatHistoryList();
            setupEventListeners();

            // Initialize chat list visibility based on screen width
            if (window.innerWidth <= 768) {
                hideChatList();
                isChatListVisible = false;
                chatListToggleRightButton.style.display = 'block';
            } else {
                showChatList();
                isChatListVisible = true;
                chatListToggleRightButton.style.display = 'none';
            }

            // Check for chatId in URL
            const pathSegments = window.location.pathname.split('/');
            const chatIdFromUrl = pathSegments[pathSegments.length - 1];

            if (chatIdFromUrl && chatIdFromUrl !== 'chatbot' && !isNaN(chatIdFromUrl)) {
                loadChat(chatIdFromUrl);
                currentChatId = chatIdFromUrl;
            } else {
                startNewChat();
            }
        });

        // Event Listeners Setup
        function setupEventListeners() {
            // Chat functionality
            sendChatButton.addEventListener('click', sendChatMessage);
            chatInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') sendChatMessage();
            });
            newChatButton.addEventListener('click', startNewChat);
            chatListToggleLeftButton.addEventListener('click', () => {
                hideChatList();
                isChatListVisible = false;
                chatListToggleRightButton.style.display = 'block';
            });
            chatListToggleRightButton.addEventListener('click', () => {
                showChatList();
                isChatListVisible = true;
                chatListToggleRightButton.style.display = 'none';
            });

            // Settings functionality
            settingsButton.addEventListener('click', () => {
                settingsPopup.classList.add('show');
                settingsOverlay.classList.add('show'); // Show overlay
                loadSettingsValuesToPopup(); // Populate settings values when opening
            });
            closeSettingsButton.addEventListener('click', closeSettings);
            cancelSettingsButton.addEventListener('click', closeSettings);
            saveSettingsButton.addEventListener('click', saveSettings);

            // Settings tabs
            settingsTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    settingsTabs.forEach(t => {
                        t.classList.remove('active');
                        t.setAttribute('aria-selected', 'false');
                    });
                    settingsContents.forEach(c => c.classList.remove('active'));

                    tab.classList.add('active');
                    tab.setAttribute('aria-selected', 'true');
                    const tabName = tab.dataset.tab;
                    document.querySelector(`.settings-content[data-tab-content="${tabName}"]`).classList.add('active');
                });
            });

            // Range inputs
            temperatureInput.addEventListener('input', () => {
                const tempValue = (temperatureInput.value / 100).toFixed(1);
                temperatureValue.textContent = tempValue;
            });
            fontSizeInput.addEventListener('input', () => {
                fontSizeValue.textContent = `${fontSizeInput.value}px`;
            });

            // Logout button
            logoutButton.addEventListener('click', () => {
                if (confirm('Are you sure you want to logout?')) {
                    console.log('User logged out');
                    window.location.href = '/logout';
                }
            });

            // Close settings when clicking outside
            settingsOverlay.addEventListener('click', (e) => {
                if (e.target === settingsOverlay) closeSettings();
            });
        }

        // Chat Functions
        function fetchChatHistoryList() {
            fetch('/api/chat/histories')
                .then(response => response.json())
                .then(histories => {
                    chatList.innerHTML = '';
                    histories.forEach(history => {
                        addChatToList(history);
                    });
                });
        }

        function addChatToList(history) {
            const listItem = document.createElement('li');
            listItem.classList.add('chat-list-item');
            listItem.dataset.chatId = history.id;

            const date = new Date(history.created_at);
            const formattedDate = date.toLocaleString();

            listItem.innerHTML = `
                <span>Chat created ${formattedDate}</span>
                <button onclick="deleteChat('${history.id}')"><i class="fas fa-trash"></i></button>
            `;
            chatList.appendChild(listItem);

            listItem.addEventListener('click', function (event) {
                if (!event.target.closest('button')) {
                    window.location.href = `/chatbot/${history.id}`;
                }
            });
        }

        function startNewChat() {
            currentChatId = null;
            chatMessagesArea.innerHTML = '';
            chatInput.value = '';
            window.history.pushState({}, '', '/chatbot');
        }


        function loadChat(chatId) {
            currentChatId = chatId;
            chatMessagesArea.innerHTML = '';
            fetchChatMessages(chatId);
        }

        function fetchChatMessages(chatId) {
            fetch(`/api/chat/histories/${chatId}`)
                .then(response => response.json())
                .then(chatHistory => {
                    if (chatHistory?.conversation_history) {
                        chatHistory.conversation_history.forEach(message => {
                            if (message.role === 'user') {
                                addUserMessage(message.parts[0].text);
                            } else if (message.role === 'model') {
                                addAiMessage(message.parts[0].text);
                            }
                        });
                    }
                });
        }

        function deleteChat(chatId) {
            if (!confirm('Are you sure you want to delete this chat?')) return;

            fetch(`/api/chat/clear-history/${chatId}`, { method: 'POST' })
                .then(response => response.json().then(data => ({ status: response.status, ok: response.ok, data })))
                .then(result => {
                    if (result.ok) {
                        fetchChatHistoryList();
                        if (currentChatId === chatId) startNewChat();
                    } else {
                        alert(`Failed to delete chat: ${result.data.message}`);
                    }
                })
                .catch(error => {
                    console.error("Error deleting chat:", error);
                    alert("Error deleting chat.");
                });
        }

        function sendChatMessage() {
            const messageText = chatInput.value.trim();
            if (!messageText) return;

            addUserMessage(messageText);
            chatInput.value = '';

            // Display "Generating" animation *before* sending API request
            displayGeneratingAnimation(); // Call new function to show animation

            // Use temperature from currentSettings
            const temperature = currentSettings.temperature;
            const model = currentSettings.model;

            const payload = {
                message: messageText,
                temperature: temperature,
                model: model
            };
            if (currentChatId) payload.chatId = currentChatId;

            fetch('/api/bot-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
                .then(response => response.json())
                .then(data => {
                    removeGeneratingAnimation(); // Remove animation when response is received
                    addAiMessage(data.aiResponse);
                    if (data.newChatId && !currentChatId) {
                        currentChatId = data.newChatId;
                        fetchChatHistoryList();
                    }
                })
                .catch(error => {
                    removeGeneratingAnimation(); // Remove animation on error as well
                    console.error("Error calling API:", error);
                    addAiMessage("Error getting AI response. Please try again.");
                });
        }

        function addUserMessage(message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', 'user-message');
            messageDiv.innerHTML = `<div class="message-bubble">${message}</div>`;
            chatMessagesArea.appendChild(messageDiv);
            setTimeout(() => messageDiv.classList.add('show'), 10);
            chatMessagesArea.scrollTop = chatMessagesArea.scrollHeight;
        }

        function addAiMessage(message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', 'ai-message');
            const html = marked.parse(message);
            messageDiv.innerHTML = `<div class="message-bubble">${html}</div>`;
            chatMessagesArea.appendChild(messageDiv);
            setTimeout(() => messageDiv.classList.add('show'), 10);
            chatMessagesArea.scrollTop = chatMessagesArea.scrollHeight;
        }

        // --- Generating Animation Functions ---
        function displayGeneratingAnimation() {
            const generatingDiv = document.createElement('div');
            generatingDiv.classList.add('message', 'ai-message', 'generating-message'); // Added 'generating-message' class
            generatingDiv.innerHTML = `
                <div class="message-bubble">
                    <span class="generating-dots">
                        <span>.</span><span>.</span><span>.</span>
                    </span>
                </div>`;
            chatMessagesArea.appendChild(generatingDiv);
            setTimeout(() => generatingDiv.classList.add('show'), 10);
            chatMessagesArea.scrollTop = chatMessagesArea.scrollHeight;
        }

        function removeGeneratingAnimation() {
            const generatingMessage = chatMessagesArea.querySelector('.generating-message');
            if (generatingMessage) {
                chatMessagesArea.removeChild(generatingMessage);
            }
        }


        function hideChatList() {
            chatListContainer.classList.add('hidden-chat-list');
            chatListContainer.classList.remove('visible-chat-list');
            chatContainer.classList.remove('chat-list-visible'); // Remove reduced width class
            chatContainer.classList.remove('list-visible-on-phone');
        }

        function showChatList() {
            chatListContainer.classList.remove('hidden-chat-list');
            if (window.innerWidth <= 768) {
                chatListContainer.classList.add('visible-chat-list');
                chatContainer.classList.add('list-visible-on-phone'); // Keep mobile specific class if needed
                chatContainer.classList.remove('chat-list-visible'); // Ensure reduced width class is not applied on mobile
            } else {
                chatContainer.classList.remove('list-visible-on-phone'); // Remove mobile specific class for larger screens
                chatListContainer.classList.remove('visible-chat-list'); // Ensure mobile list class is removed
                chatContainer.classList.add('chat-list-visible'); // Apply reduced width class for larger screens
            }
        }

        // Settings Functions
        async function fetchUserSettings() {
            try {
                const response = await fetch('/api/user-settings');
                if (!response.ok) {
                    console.error('Failed to fetch user settings:', response.status, response.statusText);
                    // Fallback to default settings in currentSettings if fetch fails
                    currentSettings = { theme: 'dark', fontSize: 16, model: 'default', temperature: 1.0 };
                    applySettings();
                    return;
                }
                const settings = await response.json();
                currentSettings = {
                    theme: settings.theme,
                    fontSize: settings.font_size,
                    model: settings.ai_model,
                    temperature: settings.temperature
                };
                applySettings();
                loadSettingsValuesToPopup(); // Populate settings popup with fetched values
            } catch (error) {
                console.error('Error fetching user settings:', error);
                // Fallback to default settings in currentSettings if fetch fails
                currentSettings = { theme: 'dark', fontSize: 16, model: 'default', temperature: 1.0 };
                applySettings();
            }
        }


        function loadSettingsValuesToPopup() {
            themeSelect.value = currentSettings.theme;
            fontSizeInput.value = currentSettings.fontSize;
            fontSizeValue.textContent = `${fontSizeInput.value}px`;
            modelSelect.value = currentSettings.model; // If you are using modelSelect in settings
            temperatureInput.value = currentSettings.temperature * 100; // Convert back to 0-200 range
            temperatureValue.textContent = currentSettings.temperature.toFixed(1);
        }


        function saveSettings() {
            const settings = {
                theme: themeSelect.value,
                fontSize: parseInt(fontSizeInput.value),
                model: modelSelect.value,
                temperature: parseFloat((temperatureInput.value / 100).toFixed(1))
            };

            // Disable close and cancel buttons, add saving class and animation
            closeSettingsButton.disabled = true;
            cancelSettingsButton.disabled = true;
            saveSettingsButton.classList.add('saving');
            settingsPopup.classList.add('saving');

            fetch('/api/save-settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Re-enable buttons, remove saving class and animation on success
                    closeSettingsButton.disabled = false;
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    if (data.success) {
                        currentSettings = settings;
                        applySettings();
                        closeSettings();
                        console.log('Settings saved successfully to backend.');
                    } else {
                        alert('Failed to save settings: ' + data.message);
                    }
                })
                .catch(error => {
                    // Re-enable buttons, remove saving class and animation on error too
                    closeSettingsButton.disabled = false;
                    cancelSettingsButton.disabled = false;
                    saveSettingsButton.classList.remove('saving');
                    settingsPopup.classList.remove('saving');
                    console.error('Error saving settings:', error);
                    alert('Error saving settings. Please try again.');
                });
        }

        function closeSettings() {
            settingsPopup.classList.remove('show');
            settingsOverlay.classList.remove('show'); // Hide overlay
        }


        function applySettings() {
            themeSelect.value = currentSettings.theme; // Ensure select element is updated too on apply
            themeSelect.dispatchEvent(new Event('change')); // Trigger change event if needed for listeners

            // Apply theme
            document.body.classList.remove('light-theme', 'dark-theme', 'sepia-theme', 'contrast-theme');
            if (currentSettings.theme === 'light') {
                document.body.classList.add('light-theme');
            } else if (currentSettings.theme === 'sepia') {
                document.body.classList.add('sepia-theme');
            } else if (currentSettings.theme === 'contrast') {
                document.body.classList.add('contrast-theme');
            }
             else {
                document.body.classList.add('dark-theme'); // Default to dark if theme is not recognized or 'dark'
            }


            // Apply font size
            document.documentElement.style.setProperty('--base-font-size', `${currentSettings.fontSize}px`);

            // Apply temperature to chat requests - already handled in sendChatMessage function

            // Apply model if needed in future logic - currentSettings.model is available
        }


        // Make deleteChat available globally for button clicks
        window.deleteChat = deleteChat;
    </script>
</body>

</html>